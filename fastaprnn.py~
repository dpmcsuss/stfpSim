
from sklearn.neighbors import KNeighborsClassifier, weighted_mode, _get_weights, stats
import os
os.sys.path.extend([os.path.abspath('~/Packages/flann-1.7.1-src/src/python/')])
import pyflann

class FAKNeighborsClassifier(KNeighborsClassifier):
    def __init__(self,n_neighbors=5,weights='uniform'):
        super(FAKNeighborsClassifier,self).__init__(n_neighbors=n_neighbors,weights=weights)
        
    def _fit(self,X,Y):
        self.flann = pyflann.FLANN()
        self.flann.build_index(X)
    
    def kneighbors(self, X, n_neighbors=None, return_distance=True):
        if n_neighbors is None:
            n_neighbors = self.n_neighbors
        ind,dist = self.flann.nn_index(X,self.n_neighbors)

        if n_neighbors == 1:
            dist = dist[:, None]
            ind = ind[:, None]

        
        if return_distance:
            return dist,ind
        else:
            return ind

            
class FAKPseudoNeighbor(FAKNeighborsClassifier):
    def __init__(self,n_neighbors=5, weights='uniform'):
        super(FAKPseudoNeighbor,self).__init__(n_neighbors=n_neighbors,weights=weights)

    def fit(self,X,y,G):
        super(FAKPseudoNeighbor,self).fit(X,y)
        self._G = G

    def kneighbors(self, X, idx=None, n_neighbors=None, return_distance=True):
        if n_neighbors is None:
            n_neighbors = self.n_neighbors


            

    def predict(self, X, idx=None):
        if idx is None:
            return super(FAKPseudoNeighbor,self).predict(X)

        neigh_dist, neigh_ind = self.kneighbors()
        pred_labels = self._y[neigh_ind]

        weights = _get_weights(neigh_dist, self.weights)

        if weights is None:
            mode, _ = stats.mode(pred_labels, axis=1)
        else:
            mode, _ = weighted_mode(pred_labels,weights,axis)
            

    def score(self, X, y, idx=None):
        pass